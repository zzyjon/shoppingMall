package com.lsm.web.moosinsa.member;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.lsm.web.cart.CartService;
import com.lsm.web.cart.CartVO;

@Controller
public class MemberController {

	@Autowired
	MemberService service;

	@Autowired
	CartService cartService;
	
	// 파라미터값을 파싱해주는 어노테이션
	/*
	 * @InitBinder public void initBinder(WebDataBinder wdb) {
	 * wdb.registerCustomEditor(int.class, new CustomNumberEditor(Integer.class,
	 * true));
	 * 
	 * }
	 */

	// 회원 조회&검색기능
	@GetMapping("/admin/page/member/memberList1")
	public String memberList(Model model, @ModelAttribute("svo") MemberSVO svo, BindingResult result) {
		// System.out.println("gender ==" + svo.getGender());
		List<MemberVO> list = service.selectMemberList(svo);
		model.addAttribute("list", list);

		return "admin/page/member/memberList1";

	}

	// 임시
	@GetMapping("/user/page/member/templete")
	public String regsuc() {
		return "user/page/member/templete";
	}

	// 회원삭제기능
	@PostMapping("/admin/page/member/memberDel")
	public String memberDel(@ModelAttribute MemberVO vo) {
		service.SelectMemberDelete(vo);
		return "admin/page/member/memberList1";
	}

	// 등급삭제기능
	@PostMapping("/admin/page/member/gradeDel")
	public String gradeDel(@ModelAttribute MemberVO vo) {
		service.selectGradeDelete(vo);
		return "admin/page/member/memberGradeList";
	}

	// 멤버 등급 조회
	@GetMapping("/admin/page/member/memberGradeList")
	public String memberGradeList(Model model) {
		List<MemberVO> list = service.selectMemberGradeList();
		model.addAttribute("list", list);
		return "admin/page/member/memberGradeList";
	}

	// 등급 추가 기능
	@PostMapping("/admin/page/member/gradeInsert")
	public ModelAndView memberGradeInsert(@ModelAttribute MemberVO vo, BindingResult result1) {
		ModelAndView mav = new ModelAndView("jsonView");
		int result = service.selectGradeInsert(vo);
		if (result > 0) {
			mav.addObject("result", "200");
			mav.addObject("desc", "insert Succerss");
		} else {
			mav.addObject("result", "100");
			mav.addObject("desc", "insert fail");
		}

		return mav;
	}

	// 회원 정보 수정 뷰(모달)
	@GetMapping("/admin/page/member/gradeUpdate")
	public ModelAndView memberGradeUpdate(@ModelAttribute MemberVO paramVo) {
		ModelAndView mav = new ModelAndView("jsonView");
		// MemberVO vo = service.selectMemberModalView(paramVo);
		// mav.addObject("memberList",vo);

		return mav;
	}

	// 회원 정보 수정 뷰(모달)
	@GetMapping("/admin/page/member/memberModalView")
	public ModelAndView memberModalView(@ModelAttribute MemberVO paramVo) {
		ModelAndView mav = new ModelAndView("jsonView");
		// MemberVO vo = service.selectMemberModalView(paramVo);
		// mav.addObject("memberList",vo);

		return mav;
	}

	@GetMapping("/user/page/member/memberRegistView")
	// 회원가입페이지
	public String memberRegisterView() {
		return "user/page/member/memberRegist";
	}

	// 회원 가입 처리
	@PostMapping("/user/page/member/memberRegist")
	public String memberRegister(@ModelAttribute MemberVO vo) {
		service.insertMemberRegist(vo);

		return "user/index";
	}
	// 회원가입 중복체크

	@PostMapping("/user/page/member/memberIdCheck")
	public ModelAndView memberIdCheck(@ModelAttribute MemberVO vo) {
		ModelAndView mav = new ModelAndView("jsonView");
		int result = service.selectIdNickCheck(vo);
		System.out.println(vo.getmId());
		if (result > 0) {
			mav.addObject("result", "200");
			mav.addObject("desc", "insert success");
		} else {
			mav.addObject("result", "201");
			mav.addObject("desc", "insert success");
		}
		return mav;
	}

	// 로그인 페이지
	@GetMapping("/user/page/member/loginMain")
	public String loginView() {
		return "user/page/member/loginMain";
	}

	// 로그인
	@PostMapping("/member/procLogin")
	public ModelAndView procLogin(@ModelAttribute MemberVO paramVO, HttpSession session) {
		ModelAndView mav = new ModelAndView("jsonView");
		MemberVO vo = service.selectSessionLogin(paramVO);
		
		List<CartVO> cartList = null;
		int sumCart = 0;
		
		if (vo != null) {
			service.updateLoginDate(paramVO);

			session.setAttribute("user", vo);
			
			cartList = cartService.selectCartList(vo.getmId());
			sumCart = cartService.sumCart(vo.getmId());// 장바구니 총 금액
			session.setAttribute("cartList", cartList);
			session.setAttribute("sumCart", sumCart);
			session.setAttribute("cartExist",cartList.size());
			
			mav.addObject("result", "200");
			mav.addObject("desc", "login success");

		} else {
			mav.addObject("result", "101");
			mav.addObject("desc", "login fail");

		}
		return mav;
	}

	// 로그아웃 처리
	@RequestMapping("/member/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/user/index";
	}

	// 아이디/패스워드 찾기
	@GetMapping("/user/page/member/searchUserInfo")
	public String searchForm() {
		return "user/page/member/searchUserInfo";
	}

	// 아이디 검색처리
	@PostMapping("/user/page/member/memberIdSearchCheck")
	public String searchId(Model model, @ModelAttribute MemberVO vo) {
		List<MemberVO> list = service.selectSearchUserInfo(vo);

		model.addAttribute("list", list);
		model.addAttribute("mName", vo.getmName());

		return "user/page/member/memberIdSearchResult";
	}

	// 비밀번호 검색처리
	@PostMapping("/user/page/member/memberPwSearchCheck")
	public String searchPw(Model model, @ModelAttribute MemberVO vo) {
		List<MemberVO> list = service.selectSearchUserInfo(vo);
		if (list.size() > 0) {
			System.out.println("비번 사이즈 " + list.size());
			model.addAttribute("list", list);
			model.addAttribute("mId", vo.getmId());
			return "user/page/member/memberPwSearchResult";

		} else {
			return "user/page/member/memberPwSearchResultX";
		}

	}

	// 회원정보 수정 처리(유저)
	@PostMapping("/user/page/member/memberInfoModify")
	public String memberModify(@ModelAttribute MemberVO vo) {

		return "";
	}

	// 아이디 찾기후 비밀번호 변경 처리
	@PostMapping("/user/page/member/updatemPw")
	public ModelAndView updatemPw(@ModelAttribute MemberVO vo) {
		ModelAndView mav = new ModelAndView("jsonView");
		int result = service.updatemPw(vo);
		if (result > 0) {
			mav.addObject("result", "300");
			mav.addObject("desc", "update success");
		} else {
			mav.addObject("result", "301");
			mav.addObject("desc", "update fail");
		}

		return mav;
	}

	// 내정보 회원정보보기(메인)
	@GetMapping("/user/page/member/myInfo_main")
	public String info_main(Model model, HttpSession session) {
		String mId = (String) session.getAttribute("mId");
		MemberVO vo = service.selectMemberView(mId);
		model.addAttribute("member", vo);

		return "user/page/member/myInfo_main";
	}

	// 내정보 회원등급
	@GetMapping("/user/page/member/myInfo_grade")
	public String info_grade(Model model, HttpSession session) {
		String mId = (String) session.getAttribute("mId");
		MemberVO vo = service.selectMemberView(mId);
		MemberVO mvo = service.selectGradeViewDetail(mId);
		List<MemberVO> list = service.selectGradeView();
		model.addAttribute("member", vo);
		model.addAttribute("grade",list);
		model.addAttribute("memberDetail", mvo);

		return "user/page/member/myInfo_grade";
	}

	// 내정보 회원정보 수정 처리
	@PostMapping("/user/page/member/myInfo_modify")
	public String infoModify(@ModelAttribute MemberVO vo) {
		service.updateMemberModify(vo);

		return "/user/page/member/myInfo_main";

	}

	/*
	 * 파일 업로드 시작 MultipartFile[] files = vo.getFile(); for(int i = 0; i <
	 * files.length; i++) {
	 * 
	 * if(files[i].isEmpty()) { // isEmpty 비어있으면 넘어감 continue; }
	 * 
	 * byte[] bytes;
	 * 
	 * try { bytes = files[i].getBytes(); Path path = Paths.get(
	 * "C:/Users/노형정/eclipse-workspace/spring_shoppingmall/src/main/resources/static/member/"
	 * + files[i].getOriginalFilename());
	 * 
	 * vo.setmImage(files[i].getOriginalFilename()); // 업로드한 파일 이름 셋팅
	 * 
	 * Files.write(path, bytes);
	 * 
	 * } catch (IOException e) { // TODO Auto-generated catch block
	 * e.printStackTrace(); } }
	 */

}
